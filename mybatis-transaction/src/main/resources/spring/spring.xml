<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">


    <!--&lt;!&ndash; 基于Druid数据库链接池的数据源配置 &ndash;&gt;-->
    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
        <!--&lt;!&ndash; 基本属性driverClassName、 url、user、password &ndash;&gt;-->
        <!--<property name="driverClassName" value="com.mysql.jdbc.Driver" />-->
        <!--<property name="url" value="${mysql.url}" />-->
        <!--<property name="username" value="${mysql.username}" />-->
        <!--<property name="password" value="${mysql.password}" />-->
        <!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
        <!--&lt;!&ndash; 通常来说，只需要修改initialSize、minIdle、maxActive &ndash;&gt;-->
        <!--<property name="initialSize" value="2" />-->
        <!--<property name="minIdle" value="2" />-->
        <!--<property name="maxActive" value="30" />-->
        <!--<property name="testWhileIdle" value="true" />-->
        <!--<property name="testOnBorrow" value="true" />-->
        <!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="5000" />-->
        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="30000" />-->
        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000" />-->
        <!--&lt;!&ndash; 给出一条简单的sql语句进行验证&ndash;&gt;-->
        <!--<property name="validationQuery" value="select sysdate from dual" />-->
        <!--&lt;!&ndash; 解密密码必须要配置的项 &ndash;&gt;-->
        <!--&lt;!&ndash; <property name="filters" value="config" />-->
        <!--<property name="connectionProperties" value="config.decrypt=true" /> &ndash;&gt;-->
    <!--</bean>-->

    <!--&lt;!&ndash; 将数据源映射到sqlSessionFactory中 &ndash;&gt;-->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--<property name="configLocation" value="classpath:mybatis/mybatis-mysql.xml" />-->
        <!--&lt;!&ndash; 显式指定Mapper文件位置 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="mapperLocations" value="classpath*:mybatis/mapper/**Mapper.xml" />&ndash;&gt;-->
        <!--<property name="dataSource" ref="dataSource" />-->
    <!--</bean>-->


    <!--&lt;!&ndash; SqlSession模板类实例 &ndash;&gt;-->
    <!--<bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close">-->
        <!--<constructor-arg index="0" ref="sqlSessionFactory" />-->
    <!--</bean>-->

    <!--&lt;!&ndash; 配置扫描器 &ndash;&gt;-->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--&lt;!&ndash; 扫描这个包以及它的子包下的所有映射接口类 &ndash;&gt;-->
        <!--<property name="basePackage" value="com.xx.mybatis.example.outmapper.dao.mysql" />-->
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />-->
    <!--</bean>-->

    <!--&lt;!&ndash;======= 事务配置 Begin ================= &ndash;&gt;-->
    <!--&lt;!&ndash; 事务管理器（由Spring管理MyBatis的事务） &ndash;&gt;-->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--&lt;!&ndash; 关联数据源 &ndash;&gt;-->
        <!--<property name="dataSource" ref="dataSource"></property>-->
        <!--<qualifier value="mysql"></qualifier>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 使用annotation注解方式配置事务 &ndash;&gt;-->
    <!--<tx:annotation-driven transaction-manager="transactionManager" />-->


    <!-- 数据源2 -->
    <bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性driverClassName、 url、user、password -->
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
        <property name="url" value="${oracle.url}" />
        <property name="username" value="${oracle.username}" />
        <property name="password" value="${oracle.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <!-- 通常来说，只需要修改initialSize、minIdle、maxActive -->
        <property name="initialSize" value="2" />
        <property name="minIdle" value="2" />
        <property name="maxActive" value="30" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="true" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="5000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="30000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 给出一条简单的sql语句进行验证-->
        <property name="validationQuery" value="select sysdate from dual" />
        <!-- 解密密码必须要配置的项 -->
        <!-- <property name="filters" value="config" />
        <property name="connectionProperties" value="config.decrypt=true" /> -->
    </bean>

    <!-- 将数据源映射到sqlSessionFactory中 -->
    <bean id="sqlSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis/mybatis-oracle.xml" />
        <!-- 显式指定Mapper文件位置 -->
        <!--<property name="mapperLocations" value="classpath*:mybatis/mapper/**Mapper.xml" />-->
        <property name="dataSource" ref="dataSource2" />
    </bean>

    <!--<bean id="sqlSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--<property name="configLocation" value="classpath:mybatis/mybatis-oracle.xml" />-->
        <!--&lt;!&ndash; 显式指定Mapper文件位置 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="mapperLocations" value="classpath*:mybatis/mapper/**Mapper.xml" />&ndash;&gt;-->
        <!--<property name="dataSource" ref="dataSource2" />-->
    <!--</bean>-->


    <!-- SqlSession模板类实例 -->
    <bean id="sessionTemplate2" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close">
        <constructor-arg index="0" ref="sqlSessionFactory2" />
    </bean>

    <!-- 配置扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描这个包以及它的子包下的所有映射接口类 -->
        <property name="basePackage" value="com.xx.mybatis.example.outmapper.dao.oracle" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory2" />
    </bean>

    <!--======= 事务配置 Begin ================= -->
    <!-- 事务管理器（由Spring管理MyBatis的事务） -->
    <bean id="transactionManager2" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 关联数据源 -->
        <property name="dataSource" ref="dataSource2"></property>
        <qualifier value="oracle"></qualifier>
    </bean>

    <bean class="org.springframework.transaction.aspectj.AnnotationTransactionAspect">
        <property name="transactionManager" ref="transactionManager2"></property>
    </bean>


    <!-- 使用annotation注解方式配置事务 -->
    <tx:annotation-driven mode="aspectj" transaction-manager="transactionManager2" />
    <!--======= 事务配置 End =================== -->








</beans>