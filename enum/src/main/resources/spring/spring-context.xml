<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
           http://www.springframework.org/schema/aop   
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  
           http://www.springframework.org/schema/tx  
           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd  
           http://www.springframework.org/schema/context  
           http://www.springframework.org/schema/context/spring-context-3.2.xsd"
	default-autowire="byName" default-lazy-init="false">

	<context:property-placeholder location="classpath:config/jdbc.properties,config/common.properties"/>

	<!-- proxy-target-class默认"false",更改为"ture"使用CGLib动态代理 -->
	<!--<aop:aspectj-autoproxy proxy-target-class="true" />-->

	<!-- 配置要扫描的包 -->
	<context:component-scan base-package="com.xx.mybatis.example.enums"    />

	<aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true">
		<!--<aop:include name="com.xx"></aop:include>-->
	</aop:aspectj-autoproxy>

	<!-- 采用注释的方式配置bean -->
	<context:annotation-config  />

	<!-- 读入配置属性文件 -->


	
	<!-- 依赖服务 -->
	<!--<import resource="classpath:spring/spring.xml" />-->
	
	<!-- 暴露服务 -->

	<bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性driverClassName、 url、user、password -->
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="${oracle.url}" />
		<property name="username" value="${oracle.username}" />
		<property name="password" value="${oracle.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<!-- 通常来说，只需要修改initialSize、minIdle、maxActive -->
		<property name="initialSize" value="2" />
		<property name="minIdle" value="2" />
		<property name="maxActive" value="30" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="true" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="5000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="30000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 给出一条简单的sql语句进行验证-->
		<property name="validationQuery" value="select sysdate from dual" />
		<!-- 解密密码必须要配置的项 -->
		<!-- <property name="filters" value="config" />
        <property name="connectionProperties" value="config.decrypt=true" /> -->
	</bean>

	<!-- 将数据源映射到sqlSessionFactory中 -->
	<!--<bean id="sqlSessionFactory2" class="com.xx.mybatis.example.common.util.DefaultSqlSessionFactoryBean">-->
	<!--<property name="configLocation" value="classpath:mybatis/mybatis-oracle.xml" />-->
	<!--&lt;!&ndash; 显式指定Mapper文件位置 &ndash;&gt;-->
	<!--&lt;!&ndash;<property name="mapperLocations" value="classpath*:mybatis/mapper/**Mapper.xml" />&ndash;&gt;-->
	<!--<property name="dataSource" ref="dataSource2" />-->
	<!--<property name="enumBasePackage" value="com.xx.mybatis.example.common.entity"></property>-->
	<!--</bean>-->

	<bean id="sqlSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/mybatis-oracle.xml" />
		<!-- 显式指定Mapper文件位置 -->
		<!--<property name="mapperLocations" value="classpath*:mybatis/mapper/**Mapper.xml" />-->
		<property name="dataSource" ref="dataSource2" />
	</bean>


	<!-- SqlSession模板类实例 -->
	<bean id="sessionTemplate2" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close">
		<constructor-arg index="0" ref="sqlSessionFactory2" />
	</bean>

	<!-- 配置扫描器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描这个包以及它的子包下的所有映射接口类 -->
		<property name="basePackage" value="com.xx.mybatis.example.enums.dao.oracle" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory2" />
	</bean>

	<!--======= 事务配置 Begin ================= -->
	<!-- 事务管理器（由Spring管理MyBatis的事务） -->
	<bean id="transactionManager2" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 关联数据源 -->
		<property name="dataSource" ref="dataSource2"></property>
		<!--<qualifier value="oracle"></qualifier>-->
	</bean>

	<!--<tx:advice id="advice" transaction-manager="transactionManager2">-->
		<!--<tx:attributes>-->
			<!--<tx:method name="saveUsers2"/>-->
		<!--</tx:attributes>-->
	<!--</tx:advice>-->

	<!--<aop:config>-->
		<!--<aop:pointcut expression="execution(* com.xx.mybatis.example.outmapper.service.UserInfoService+.*(..) )" id="pointcut"/>-->
		<!--<aop:advisor advice-ref="advice" pointcut-ref="pointcut"/>-->
	<!--</aop:config>-->




	<!--<bean class="org.springframework.transaction.aspectj.AnnotationTransactionAspect">-->
		<!--<property name="transactionManager" ref="transactionManager2"></property>-->
	<!--</bean>-->


	<!-- 使用annotation注解方式配置事务 -->
	<tx:annotation-driven mode="aspectj" transaction-manager="transactionManager2" proxy-target-class="true" />
</beans>